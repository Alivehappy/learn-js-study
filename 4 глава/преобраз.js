'string'
// Для преобразования объекта к строке, когда мы выполняем операцию над объектом, которая ожидает строку, например alert:
alert(obj)
// используем объект в качестве ключа
anotherObj[obj] = 123
console.log(anotherObj) // { "[object Object]": 123 }

//number
//Для преобразования объекта к числу, в случае математических операций
let num = Number(obj) //явное
// математические (не считая бинарного плюса)
let n = +obj // унарный плюс
let delta = date1 - date2
/ сравнения больше/меньше
let greater = user1 > user2;
// бинарный плюс использует хинт "default"
let total = obj1 + obj2;

// obj == number использует хинт "default"
if (user == 1) { ... };
/*Чтобы выполнить преобразование, JavaScript пытается найти и вызвать три следующих метода объекта:

Вызвать obj[Symbol.toPrimitive](hint) – метод с символьным ключом Symbol.toPrimitive (системный символ), если такой метод существует,
Иначе, если хинт равен "string"
попробовать вызвать obj.toString() или obj.valueOf(), смотря какой из них существует.
Иначе, если хинт равен "number" или "default"
попробовать вызвать obj.valueOf() или obj.toString(), смотря какой из них существует.
*/
obj[Symbol.toPrimitive] = function(hint);
  // вот код для преобразования этого объекта в примитив
  // он должен вернуть примитивное значение
  // hint = чему-то из "string", "number", "default"
};
//Метод toString возвращает строку "[object Object]".
//Метод valueOf возвращает сам объект.
let user = {
  name: "john",
  money: 1000,
  // для хинта равного "string"
  toString(){
    return `name: "${this.name}"`;
  },
// для хинта равного "number" или "default"
valueOf(){
  return this.money;
}

};
alert(user); // toString -> {name: "John"}
alert(+user); // valueOf -> 1000
alert(user + 500); // valueOf -> 1500
//Метод Symbol.toPrimitive — это специальный метод в JavaScript, который позволяет объекту контролировать, как он будет преобразовываться в примитивные значения (например, в строку, число или значение по умолчанию). Это

let obj = {
  toString(){
    return '2'
  }
};
alert(obj * 2)// 4, объект был преобразован к примитиву "2", затем умножение сделало его числом
//Умножение obj * 2 сначала преобразует объект в примитив (это строка "2").
//Затем "2" * 2 становится 2 * 2 (строка преобразуется в число)let obj = {
  toString() {
    return "2";
  }
};

alert(obj + 2); // "22" ("2" + 2), преобразование к примитиву вернуло строку => конкатенация
/*Преобразование объекта в примитив вызывается автоматически многими встроенными функциями и операторами, которые ожидают примитив в качестве значения.

Существует всего 3 типа (хинта) для этого:

"string" (для alert и других операций, которым нужна строка)
"number" (для математических операций)
"default" (для некоторых других операторов, обычно объекты реализуют его как "number")
Сначала вызывается метод obj[Symbol.toPrimitive](hint), если он существует,
В случае, если хинт равен "string"
происходит попытка вызвать obj.toString() и obj.valueOf(), смотря что есть.
В случае, если хинт равен "number" или "default"
происходит попытка вызвать obj.valueOf() и obj.toString(), смотря что есть.
*/

let user = {
  name: 'John',
  money: 1000,
  [Symbol.toPrimitive](hint){
    alert(`hint: ${hint}`);
    return hint == 'string' ? `{name: '${this.name}'}` : this.money
  }
};
// демонстрация результатов преобразований:
alert(user); // hint: string -> {name: "John"}
alert(+user); // hint: number -> 1000
alert(user + 500); // hint: default -> 1500