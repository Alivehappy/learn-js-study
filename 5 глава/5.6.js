//–£ —Å–∞–º–æ–≥–æ range –Ω–µ—Ç –º–µ—Ç–æ–¥–∞ next().
//–í–º–µ—Å—Ç–æ —ç—Ç–æ–≥–æ –¥—Ä—É–≥–æ–π –æ–±—ä–µ–∫—Ç, —Ç–∞–∫ –Ω–∞–∑—ã–≤–∞–µ–º—ã–π ¬´–∏—Ç–µ—Ä–∞—Ç–æ—Ä¬ª, —Å–æ–∑–¥–∞—ë—Ç—Å—è –≤—ã–∑–æ–≤–æ–º range[Symbol.iterator](), –∏ –∏–º–µ–Ω–Ω–æ –µ–≥–æ next() –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∑–Ω–∞—á–µ–Ω–∏—è.
//–¢–∞–∫–∏–º –æ–±—Ä–∞–∑–æ–º, –æ–±—ä–µ–∫—Ç –∏—Ç–µ—Ä–∞—Ç–æ—Ä –æ—Ç–¥–µ–ª—ë–Ω –æ—Ç —Å–∞–º–æ–≥–æ –∏—Ç–µ—Ä–∏—Ä—É–µ–º–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞.

let range = {
	from: 1,
	to: 5,
};
range[Symbol.iterator] = function () {
	// ...–æ–Ω–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—ä–µ–∫—Ç –∏—Ç–µ—Ä–∞—Ç–æ—Ä–∞:
	// 2. –î–∞–ª–µ–µ, for..of —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ —Å —ç—Ç–∏–º –∏—Ç–µ—Ä–∞—Ç–æ—Ä–æ–º,
	// –∑–∞–ø—Ä–∞—à–∏–≤–∞—è —É –Ω–µ–≥–æ –Ω–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
	return {
		current: this.from,
		last: this.to,
		// 3. next() –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –Ω–∞ –∫–∞–∂–¥–æ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏ —Ü–∏–∫–ª–∞ for..of
		next() {
			// 4. –æ–Ω –¥–æ–ª–∂–µ–Ω –≤–µ—Ä–Ω—É—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ –≤ –≤–∏–¥–µ –æ–±—ä–µ–∫—Ç–∞ {done:.., value :...}
			if (this.current <= this.last) {
				return { done: false, value: this.current++ };
			} else {
				return {
					done: true,
				};
			}
		},
	};
};
for (let num of range) {
	console.log(num); //–í—ã–≤–æ–¥: 1, 2, 3, 4, 5//false- —ç—Ç–æ –ø–æ—Ç–æ–º—É —á—Ç–æ –º—ã –µ—â–µ –Ω–µ –∑–∞–∫–æ–Ω—á–∏–ª–∏ –∏—Ç–µ—Ä–∏—Ä–æ–≤–∞—Ç—å
}
//–ß—Ç–æ–±—ã —Å–¥–µ–ª–∞—Ç—å range –∏—Ç–µ—Ä–∏—Ä—É–µ–º—ã–º (–∏ –ø–æ–∑–≤–æ–ª–∏—Ç—å for..of —Ä–∞–±–æ—Ç–∞—Ç—å —Å –Ω–∏–º), –Ω–∞–º –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –≤ –æ–±—ä–µ–∫—Ç –º–µ—Ç–æ–¥ —Å –∏–º–µ–Ω–µ–º Symbol.iterator (—Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π Symbol, —Å–æ–∑–¥–∞–Ω–Ω—ã–π –∫–∞–∫ —Ä–∞–∑ –¥–ª—è —ç—Ç–æ–≥–æ).
//

{
	let range = {
		from: 1,
		to: 5,
		[Symbol.iterator]() {
			this.current = this.from;
			return this;
		},
		next() {
			if (this.current <= this.to) {
				return { done: false, value: this.current++ };
			} else {
				return { done: true };
			}
		},
	};
	for (let num of range) {
		console.log(num); // 1, –∑–∞—Ç–µ–º 2, 3, 4, 5
	}
}
//–°—Ä–µ–¥–∏ –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã—Ö –ø–µ—Ä–µ–±–∏—Ä–∞–µ–º—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤ –Ω–∞–∏–±–æ–ª–µ–µ —à–∏—Ä–æ–∫–æ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –º–∞—Å—Å–∏–≤—ã –∏ —Å—Ç—Ä–æ–∫–∏.
let test = 'test';
for (let char of test) {
	console.log(char); /// t, –∑–∞—Ç–µ–º e, –∑–∞—Ç–µ–º s, –∑–∞—Ç–µ–º t//// —Å—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç 4 —Ä–∞–∑–∞: –ø–æ –æ–¥–Ω–æ–º—É –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–∏–º–≤–æ–ª–∞
}
//–ò –æ–Ω —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –¥–∞–∂–µ —Å —Å—É—Ä—Ä–æ–≥–∞—Ç–Ω—ã–º–∏ –ø–∞—Ä–∞–º–∏!

let str = 'ùí≥üòÇ';
for (let char of str) {
	console.log(char); // ùí≥, –∞ –∑–∞—Ç–µ–º üòÇ
}
let str1 = 'Hello';
//// –¥–µ–ª–∞–µ—Ç —Ç–æ –∂–µ —Å–∞–º–æ–µ, —á—Ç–æ –∏
// for (let char of str) alert(char);
let iterator = str[Symbol.iterator]();
while (true) {
	let result = iterator.next();
	if (result.done) break;
	console.log(result.value);
}

letarrayLike = {
	0: 'hello',
	1: 'World',
	length: 2,
};
let arr = Array.from(arrayLike);
console.log(arr.pop());
{
	//–¢–æ –∂–µ —Å–∞–º–æ–µ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç —Å –∏—Ç–µ—Ä–∏—Ä—É–µ–º—ã–º –æ–±—ä–µ–∫—Ç–æ–º:

	// range –≤–∑—è—Ç –∏–∑ –ø—Ä–∏–º–µ—Ä–∞ –≤ –Ω–∞—á–∞–ª–µ —Å—Ç–∞—Ç—å–∏
	let arr = Array.from(range);
	alert(arr);
}
//Array.from(obj[, mapFn, thisArg])
//–ù–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π –≤—Ç–æ—Ä–æ–π –∞—Ä–≥—É–º–µ–Ω—Ç –º–æ–∂–µ—Ç –±—ã—Ç—å —Ñ—É–Ω–∫—Ü–∏–µ–π, –∫–æ—Ç–æ—Ä–∞—è –±—É–¥–µ—Ç –ø—Ä–∏–º–µ–Ω–µ–Ω–∞ –∫ –∫–∞–∂–¥–æ–º—É —ç–ª–µ–º–µ–Ω—Ç—É –ø–µ—Ä–µ–¥ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º –≤ –º–∞—Å—Å–∏–≤, –∞ thisArg –ø–æ–∑–≤–æ–ª—è–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å this –¥–ª—è —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.
{
	let arr = Array.from(range, num => num * num);
}
//–ó–¥–µ—Å—å –º—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º Array.from, —á—Ç–æ–±—ã –ø—Ä–µ–≤—Ä–∞—Ç–∏—Ç—å —Å—Ç—Ä–æ–∫—É –≤ –º–∞—Å—Å–∏–≤ –µ—ë —ç–ª–µ–º–µ–Ω—Ç–æ–≤
{
	let str = 'ùí≥üòÇ';
	let chars = Array.from(str);
	alert(chars[0]); // ùí≥
	alert(chars[1]); // üòÇ
	alert(chars.length); // 2
}
{
	let str = 'ùí≥üòÇ';

	let chars = []; // Array.from –≤–Ω—É—Ç—Ä–∏ —Å–µ–±—è –≤—ã–ø–æ–ª–Ω—è–µ—Ç —Ç–æ—Ç –∂–µ —Ü–∏–∫–ª
	for (let char of str) {
		chars.push(char);
	}

	alert(chars);
}

{
	function slice(str, start, end) {
		return Array.from(str).slice(start, end).join('');
	}
	let str = 'ùí≥üòÇ©∑∂';
	console.log(slice(str, 1, 3));
}
